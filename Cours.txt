







%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 00000000001000011111000010000000000000000000000
% 00000000001000010000000010000000000000000000000
% 00000000001000010000000010000000000000000000000
% 00000000001000011111000010000000000000000000000
% 00000000000000000000000000000000000000000000000
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Compl√©ment sur les donn√©es de survie}
\subsection{Introduction √† l'analyse des dur√©es de survie - Philippe SAINT PIERRE, Universit√© Pierre et Marie Curie}
Le terme de dur√©e de survie d√©signe le temps √©coul√© jusqu'√† la survenue d'un √©v√©nement pr√©cis. L'√©v√©nement √©tudi√© (commun√©ment appel√© d√©c√®s) est le passage irr√©versible entre deux √©tats (commun√©ment nomm√© vivant et d√©c√®s). L'√©v√©nement terminal n'est pas forc√©ment la mort : il peut s'agir de l'apparition d'une maladie (par exemple, le temps avant une rechute ou un rejet de greffe), d'une gu√©rison (temps entre le diagnostic et la gu√©rison),la panne d'une machine (dur√©e de fonctionnement d'une machine, en fiabilit√©) ou la survenue d'un sinistre (temps entre deux sinistres, en actuariat). [\dots]\newline
\\
Quelques d√©finitions sont couramment utilis√©es dans les √©tudes de survie.
\begin{itemize}
\item Date d'origine : elle correspond √† l'origine de la dur√©e √©tudi√©e. Elle peut √™tre la date
de naissance, le d√©but d'une exposition √† un facteur de risque, la date d'une op√©ration
chirurgicale, la date de d√©but d'une maladie ou la date d'entr√©e dans l'√©tude. Chaque
individu peut donc avoir une date d'origine di√©rente (pas important car c'est la dur√©e
qui nous int√©resse).
\item Date de point : c'est la date au-del√† de laquelle on arr√™tera l'√©tude et on ne tiendra
plus compte des informations sur les sujets.
\item Date des derni√®res nouvelles : c'est la date la plus r√©cente o√π des informations sur un
sujet ont √©t√© recueillies.
\end{itemize}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 00000000001000011111000010000000000000000000000
% 00000000001000010000000010000000000000000000000
% 00000000001000010000000010000000000000000000000
% 00000000001000011111000010000000000000000000000
% 00000000000000000000000000000000000000000000000
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{lstlisting}[language=html]

\end{lstlisting}

#-----------------------------------------------------------------








###Exercice 1.2
#-----------------------------------------------------------------
##Cr√©er les vecteurs suivants avec rep et seq :
######Explication : 
########rep(binf:bsup,nb_de_r√©petition)
rep(1:4,1)
rep(1:4,2)
rep(1:18, each = 1, len = 20) 
rep(1:4, each = 2, times = 3)
########rep(binf:bsup,pas_d_it√©ration)
seq(1,4,1)
seq(1,4,2)
seq(1, 9, by = 2)  
seq(1, 6, by = 3)
seq(1.575, 5.125, by = 0.05)
seq(17)
seq(0, 1, length.out = 11)

######----------------------------------------------------------- 
###y0 constitu√©e de la suite des entiers de ‚àí3 √† 20 par pas de 1.
y0r <- rep(-3:20, 1)
y0r
length(y0r)
y0s <- seq(-3,20,1)
y0s
length(y0s)
###y1 contient tout les entiers pairs entre 2 et 18
y1s <- seq(2,18,2)
y1s
length(y1s)
##y2 est constitu√© de 8 fois de suite la valeur 4.
y2r <- rep(4,8)
y2r
length(y2r)
##y3 contient 8 nombres entre 0 et 16, par pas √©gaux.
pas <- 16/8; pas
y3_bad <-seq(0, 16, by = 16/8)
y3_bad
length(y3_bad)
##‚àÜ‚àÜ‚àÜ‚àÜ‚àÜ‚àÜ‚àÜ Concat√©nation avec R
paste('Mauvais car il poss√®de ', length(y3_bad), 'composantes')
##Note : 16/8 = 2, en principe c‚Äôest logique qu‚Äôon utilise un pas de 2 mais on obtient 9 √©l√©ments la r√©p√©tition avec un pas de 2 n‚Äôest donc pas conseill√©e.
##Pour r√©soudre se probl√®me, il faut cr√©e une s√©quence de dont les bornes sont 0 et 16 en for√ßant la s√©quence √† contenir 8 termes. Le pas sera calcul√© automatiquement.

y3_good <- seq(0,16,length.out = 8)
#### length.out :desired length of the sequence.
y3_good
length(y3_good)
paste('Correct car il poss√®de ', length(y3_good), 'composantes')



y3 <-seq(0, 16, by = 16/8)  
if(length(y3) == 8){
  paste('Correct car il poss√®de ', length(y3), 'composantes')
} else {
  paste('Mauvais car il poss√®de ', length(y3), 'composantes')
}
  
  
y3 <- seq(0,16,length.out = 8)
if(length(y3) == 8){
    paste('Correct car il poss√®de ', length(y3), 'composantes')
} else {
    paste('Mauvais car il poss√®de ', length(y3), 'composantes')
}
  

##Extraire de y3 :
###un vecteur compos√© du 4√®me puis le 7√®me √©l√©ement.
y3_good
length(y3_good)
paste('Composante de y3 position 4 : ', y3_good[4])
paste('Composante de y3 position 7 : ', y3_good[7])
y3_ss1 <- c(y3_good[4],y3_good[7])
y3_ss1 
length(y3_ss1)
### tous les √©lements sauf le 7√®me
y3_good
length(y3_good)
paste("7√®me composante de y3 ", y3_good[7])
y3_ss2 <- c(y3_good[-7])
y3_ss2
length(y3_ss2)


##Comparer les commandes suivantes :
y0 <- seq(-3,20,1);y0
length(y0)
##Cr√©ation de la matrice (3x8) constitu√©e des composantes du vecteur y0. Remplissage par colonne (m√©thode standard).
m_c <- matrix(y0, 3, 8)
m_c
length(m_c)
paste('Nombre de ligne de m_c =', nrow(m_c))
paste('Nombre de colonne de m_c = ', ncol(m_c))
## Cr√©ation de la matrice (3x8) constitu√©e des composantes du vecteur y0. Remplissage par ligne (byrow = par ligne).
m_l <- matrix(y0, 3, 8, byrow=TRUE)
m_l
length(m_l)
paste('Nombre de ligne de m_l =', nrow(m_l))
paste('Nombre de colonne de m_l = ', ncol(m_l))
##Cr√©ation de la matrice m de 4 lignes et constitu√©e des composantes de y0. Remplissage par colonne (m√©thode standard).
###Nombre de ligne fix√©, il fait le reste
m=matrix(y0, nrow = 4);m
length(m)
paste('Nombre de ligne de m =', nrow(m))
paste('Nombre de colonne de m = ', ncol(m))

m_prime=matrix(y0, nrow = 8);m_prime
length(m_prime)
paste('Nombre de ligne de m =', nrow(m_prime))
paste('Nombre de colonne de m = ', ncol(m_prime))

##Renvoi la composante de la matrice m pr√©sente √† la position (3,3).
m[3,3]
m_prime[3,3]

##Balayage par colonne puis par ligne
m
for(i in 1:nrow(m)){
  for(j in 1:ncol(m)){
    print(m[i,j])
  }
}

m
##Balayage par colonne puis par ligne
for(i in 1:ncol(m)){
  for(j in 1:nrow(m)){
    print(m[j,i])
  }
}
m
##Retourne les composantes de la 1er et 3eme ligne pour tous les indices de colonne (de 1 √† 6).
vec_mat_1 <- m[c(1,3),]
vec_mat_1
##idem pour les lignes 2 et 4
vec_mat_12 <- m[c(2,4),]
vec_mat_12
##Retourne les composantes de la 1er et 3eme colonne pour tous les indices de ligne (de 1 √† 6).
vec_mat_2 <- m[,c(1,3)]
vec_mat_2
##idem pour les colonnes 2 et 4
vec_mat_22 <- m[,c(2,4)]
vec_mat_22
##Sup : 
m[c(1,3),1]
###Renvoi les composantes de la premi√®re et troisi√®me ligne pour la colonne d‚Äôindice 1.
m[c(1,3),3]
###Renvoi les composantes de la premi√®re et troisi√®me ligne pour la colonne d‚Äôindice 3.
m[c(1,3),6]
###Renvoi les composantes de la premi√®re et troisi√®me ligne pour la colonne d‚Äôindice 6.
m[c(2,4),2]
###Renvoi les composantes de la deuxi√®me et quatri√®me ligne pour la colonne d‚Äôindice 2.
m[c(2,4),4]
###Renvoi les composantes de la deuxi√®me et quatri√®me ligne pour la colonne d‚Äôindice 4.
m[c(2,4),5]
###Renvoi les composantes de la deuxi√®me et quatri√®me ligne pour la colonne d‚Äôindice 5.
m[c(2,1),c(1,3)]
###Renvoi les composantes de la deuxi√®me et quatri√®me ligne pour la colonne d‚Äôindice 1 et 3.
m[c(2,5),c(1,5)]
###Et oui, la matrice m est de dimension (4x6)
nrow(m)
ncol(m)

y1 <- seq(2,18,2);length(y1)
y2 <- rep(4,8);y2;length(y2)
y3 <- seq(0,16,length.out = 8);y3;length(y3)

###Concat√®ne les vecteurs y2 et y3 sous forme d‚Äôune matrice 2 lignes
m_2_3 <- rbind(y2, y3);m_1_2;length(m_1_2)
m_1_2 <- rbind(y1, y2);m_1_2;length(m_1_2)

###Note : Si les vecteurs que l‚Äôon tente de concat√©ner avec la fonction rbind ne sont pas de la m√™me dimension, alors le logiciel 
###recopie le nombre de composante √† partir du d√©but. Exemple : y2 est constitu√© de 8 composantes, y1 de 9 ; l‚Äô√©l√©ment d‚Äôindice (1,9) 
###est le premier √©l√©ment du vecteur y2 (1,1).
m_1_2
m_1_2[2,9]
m_1_2[2,1]


##Idem pour les colonnes : Concat√®ne les vecteurs y2 et y3 sous forme d‚Äôune matrice 2 colonnes
m_c_2_3 <- cbind(y2, y3); m_c_2_3
ncol(m_c_2_3);nrow(m_c_2_3)
length(y1);length(y2)
m_c_1_2 <- cbind(y1, y2); m_c_1_2;m_c_1_2[1,2];m_c_1_2[9,2]
ncol(m_c_1_2);nrow(m_c_1_2)
#### Toujours le m√™me probl√®me

###Exercice 1.3
#-----------------------------------------------------------------
##Cr√©er un vecteur x qui contient les r√©els compris entre 0 et 1 par pas de 0, 1.
x <- seq(0,1,0.1);x
##Calculer n la longueur de x
n <- length(x);n
##Cr√©er un vecteur y = 4x(1 ‚àí x)
y <- 4*x*(1-x);y
##tracer la courbe rejoignant les points (xi,yi)
plot(x,y,main="Graphe des couples (x,y)")
##Calculer le maximum des yi
max(y)
min(y)
##En quel point le maximum est-il atteint?
which.max(y)
y[which.max(y)]
paste('Le maximum est atteint au point num√©ro ', which.max(y), ' et a pour valeur ', y[which.max(y)])
paste('Le minimum est atteint au point num√©ro ', which.min(y), ' et a pour valeur ', y[which.min(y)])
##Tracer la courbe de la fonction f(x) = 4x^{2} (1-x) sur l‚Äôintervalle [‚àí2, 1], en rouge avec  le logiciel.
y = 4*x*x*(1-x);y
plot(x,y,main = "f(x) = 4x^{2} (1-x)",xlab = "√©chelle des x", ylab = "√©chelle des y",xlim=c(- 2,1),ylim=c(-1,1),col="red")



###Exercice 1.4
####Explications
#####Fonction factorielle n! = n x (n-1) x (n-2) x ... x 1
######factorial(nb)
tst_fac <- factorial(4)
tst_fac
#####Combinatoire : C_n^k : nombre de fa√ßon de choisir k √©l√©ments parmi n.
######choose(n,k)
n = 5
k = 2
tst_com <- choose(n, k)
tst_com
paste('Nombre de fa√ßon de choisir', k ,' √©l√©ment(s) parmi ', n ,' : ', tst_com)
##### Petit truc dr√¥le : le triangle de Pascal
for (n in 0:10) print(choose(n, k = 0:n))

###Pour k = 1, 2, 3, 4, 5, 6, taper choose(k, 0:k) puis sum(choose(k, 0:k)). A quel √©nonce du cours correspondent ces sommes ?
n <- 10
for (k in 1:n){print(choose(k,0:k))};print("C'est le triangle de Pascal")

for (k in 1:n){
  print(sum(choose(k,0:k)))
}
paste ('Mais c‚Äôest les r√©sultats du calcule de 2n pour n variant de 1 √† ',n)

## 1 - 7
### On jette deux fois un d√© √©quilibr√© : 
### 2 √©v√®nements :
#### E : " la somme des deux d√®s est paire"
#### F : " le 3 est obtenu au moins un fois"
#### D√©crivons Omega {1,2,...,6}x{1,2,...,6}
Om = 6*6
#### Calculons P(E)
### E1 : "La premi√®re face est pair et la deux√®me face est pair"
### E1 : "Deux faces paires"
E1 = 3*3
PE1 <- E1/Om
PE1
paste('la probabilit√© d obtenir deux faces paires est : ',  PE1)
### E2 : "la premi√®re face est impaire et la deuxi√®me face est impaire"
### E2 : "Deux face impaires"
E2 = 3*3
PE2 <- E2/Om
paste('la probabilit√© d obtenir deux faces impaires est : ',  PE2)
### P(E) = P(E1 ou E2)
print('P(E) = P(E1 ou E2)')
print('P(E) = P(E1) + P(E2) - P(E1 et E2)')
### Poincar√©
print('E1 et E2 sont ind√©pendants')
### E1 et E2 sont ind√©pendants 
paste ('P(E) = ', PE1, '+', PE2 , '+ 0')
PE <- PE1+PE2
PE
paste('la probabilit√© d obtenir une somme paire est : ',  PE)



### 
###

## 1 - 8
### Une urne contient deux boules blanches et 4 boules noires. On extrait successivement et au hasard toutes les boules.
### Quelle est la probabilit√© pour que toutes les boules blanches soient extraitent lors des 4 premiers tirages
###D√©crire Omega 
### Omega = {(b1,b2,b3,b4) avec (b1,b2,b3,b4)\in T}
### Tirage successif sans remises 
### Dans notre cas, l'ordre d'arriv√©e des boules blanches n'importe pas
### Arrangement  - Attention, la formule d'arrangement standard prend en compte l'ordre Ce que l'on ne veut pas ici - Pour r√©tablir le d√©sordre, il faut diviser l'arrangement par le nombre de permutation possibles
n = 6
paste ("Soit n, le nombre total de boules : n = ",n)
k = 4
paste("Soit k, le nombre de boules noires : k = ",k)
Arr <- (factorial(n)/factorial(n-k))
Per <- factorial(k)
paste("Nombre d'arrangement possibles : ",Arr, ". Nombre de permutations possibles : ", Per)
Omega <- (Arr/Per) 
Omega
paste("Card(Omega) = ", Omega)

### Soit E : "Toutes les boules blanches sont tir√©es lors des 4 premiers tirages
print("E : Toutes les boules blanches sont tir√©es lors des 4 premiers tirages")
b <- n-k
paste('Soit b, le nombre de boules blanches, b = ', b)
E <- choose(2,2) * choose(4,2)
paste('Nombre de fa√ßon de choisir',b,'blanches parmi ', n - k, 'blanches : ', choose(n-k,b))
paste('Et nombre de fa√ßons de choisir', n-k,' boules parmis les ',k, 'boules noires restantes : '  )
E
paste('Card(E) = ',6)
PE = E/Omega
paste("P(E) =",PE)

###Une urne contient 10 boules num√©rot√©es de 1 √† 10. On extrait au hasard 5 boules
###successivement et sans remises.
###Quelle est la probabilit√© pour que les boules soient tir√©es dans l‚Äôordre des
###num√©ros croissants ?
####Nombre d'arrangement possibles et l'ordre n'importe pas (Puisque dans tous les cas, on les laisses tel quel, on ne les r√©arrange pas)

omega = (factorial(10))/(factorial(5))
omega

E = (factorial(10))/(factorial(5)*factorial(5))
E

ProbaE = E/omega
ProbaE

###M√™me question avec 100 boules ?
####Nombre d'arrangement possibles et l'ordre n'importe pas
omega = (factorial(100))/(factorial(5))
omega

E = (factorial(100))/(factorial(5)*factorial(5))
E

ProbaE = E/omega
ProbaE


### On tire au hasard 5 cartes dans un jeu de 32 cartes. Quelle est la probabilit√© de
###l‚Äô√©v√©nement : {les 5 cartes sont de la m√™me famille}.
### Reflexion : 
jeu = 32
t = 4
f = 1
paste("Choix d' ", f," famille parmi les ", t ," possibles (carreaux, c≈ìur, pique, tr√®fle)")
c = 5
p = jeu/t
paste("Choix de ", c, " cartes parmi les ", p, " cartes possibles pour une couleur choisie{7,8,9,10,V,D,R,A}.")
paste("Choix de ",c," cartes parmi les ", jeu ," cartes possibles constituant le jeu de cartes.")
Omega = choose(jeu,c)
Omega
A=choose(t,f)*choose(p,c)
A
PA=A/Omega
PA

###On tire au hasard 5 cartes dans un jeu de 32 cartes. Quelle est la probabilit√© de
###l‚Äô√©v√©nement : {les 5 cartes sont de la m√™me couleur}.
col = 2
paste("Choix d‚Äôune couleur parmi les", col , " possibles (rouge, noire).")
pos =jeu/col
paste("Choix de ",c," cartes parmi les ", pos ," cartes possibles pour une couleur choisie")
paste("Choix de ",c," cartes parmi les ", jeu, " cartes possibles constituant le jeu de cartes.")

Omega = choose(32,5)
A=choose(col,f)*choose(pos,c)
A
PA = A/Omega
PA

##Combien de chances a-t-on de gagner le super jackpot √† l‚ÄôEuromillion ? 
##(5 num√©ros parmi 49, et 2 num√©ros √©toil√©s parmi 10, l‚Äôordre ne compte pas).
paste("Nombre de combinaisons possibles si on pioche 7 boules dans une urne ou sont m√©lang√©s num√©ros √©toil√©s et normaux : ") 
Omega = choose(59, 7)
Omega
##On suppose que l‚Äôon a une chance sur ... de tirer les bons num√©ros, ces derniers sont
##r√©partis dans deux urnes diff√©rentes :
A <-1
A
Omega <- choose(49,5)*choose(10,2)
PA <- A/Omega
PA


###Exercice 1.5
### Taper x = c(1). Utiliser la boucle for contenant la commande x = c(x,1) pour cr√©er un vecteur de taille 20 ne contenant que de 1.
x = c(1)
x
length(x)
for( i in 1:20){x = c(x,1)}
x
length(x)
print('Bah oui gros con, tu as d√©j√† une composante dans ton vecteur !! tu dois donc faire 19 it√©rations et non 20')
x = c(1)
for( i in 1:19){x = c(x,1)}
x
length(x)

##Comment cr√©er le m√™me vecteur avec rep ?
###Avec la fonction rep, cr√©er un vecteur de taille 20 ne contenant que de 1. c'est beaucoup plus simple
y = rep(1,20)
y
length(y)

##M√™me question, avec une commande du genre x = i*x, pour calculer 20! =factorial(20).
x = c(1)
##Ca devra toujours rester 1
length(x)
for(i in 1:20){x = i*x}
x
length(x)
f <-factorial(20)
if(f==x){
  print('tu es trop un champion')
} else {
  print('tu es trop un looser')
}
paste('avec x (boucle), tu as ', x)
paste('avec f (fonction), tu as ', f)

print("V√©rification de relation : ")
n = 8
partright = choose(2*n,n)
partleft = 0
for(k in 0:n){partleft = partleft + choose(n,k)*choose(n,k)}
partleft

if(partleft == partright){
  paste("La relation est v√©rifi√©e et on obtient ", partleft)
} else {
  paste ("Tu es trop con, tu as une variation de ", abs(partleft - partright))
}

##---------------------------------
##---------------------------------
##---------------------------------

##Notions suppl√©mentaires Alg√®bre matriciel et R
###Init matrice row bind (association de lignes)
rbind(1 ,2 ,3)
###Init matrice col bind (association de colonnes)
cbind(1, 2, 3)
###Init matrice avec fonction rep : 
#### Attention rep inverse les commandes (pour obtenir des lignes faire cbind/pour obtenir des colonnes faire rbind)
rbind(rep(0, 3))
cbind(rep(0, 3))
###Autre m√©thode pour initialiser (matrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE,dimnames = NULL))
matrix(data = 1:12, nrow = 3, ncol = 4)
matrix(1:12, 3, 4)
a <- matrix (c(1,2,3,4), 2, 2, byrow=TRUE);a
n1 <- 3;n2 <- 3;a <- matrix (rep(0, n1*n2), n1, n2);a
### Acc√®s : 
a <- matrix (c(1,2,3,4,5,6,7,8,9,10,11,12), 2, byrow=TRUE)
a
indices <- a>5 & a<9
indices
a[indices]

##Le rapport entre l'indice unique ket la paire d'indices (i, j) est :
k = (j - 1)*nrow(a) + i;k
i <- k%%nrow(a);i
j <- k%/%nrow(a) + 1;j

##Op√©rations de bases sur matrices : 
a = matrix (c(1,2,3,4,5,6), 2, 3);a
b = matrix (c(5,1,3,4,1,0), 2, 3);b
###Addition terme √† terme
a+b
###Soustraction terme √† terme 
a-b
###Multiplication terme √† terme
a*b
###Division terme √† terme
a/b

###Multiplication matricielle
a = matrix (c(1,2,3,4,5,6,8,9,0), 3, 3);a
b = matrix (c(5,1,3,4,1,0,2,1,8), 3, 3);b
a %*% b
###D√©terminant 
det(a)
###Transposition
aperm(a)
###Produit scalaire
a %*% aperm(b)
###Norme 
sqrt(a %*% aperm(a))
sqrt(aperm(a) %*% a)
###Inversion 
solve(a)
###Etudes du spectre d'une matrice :
x = eigen(a)
x$values # valeurs propres
x$vectors # vecteurs propres




#CODE TP1
#FAC
setwd("~/L2-S4-2016-2017/R/1_TP")
#MAC
##setwd("/Users/mehdilatif/Desktop/√âTUDES/FAC/S4/2016_2017/PROBA/R")

##### VECTEURS CREATIONS
x <- c(1,3,5,7);x
y <- c(2,3,5,7,11,13);y
z <- c(4,-1);z
b <- y < 5;b

##### OPERATIONS BASES
# / division r√©elle
47 / 8
# %/% division euclidienne 
47 %/% 8
7*8+5
# %% modulo
47 %% 8
7+8*5

##### PRODUIT SCALAIRE
a<- c(2,3)
b<-c(5,6)
# produit de matrices
a %*% b
x+2
y*3

##### OPERATIONS BASES VECTORIELLES
v<-seq(10,60, by=10)
w<-c(20,10,31,31,61,51)
u<-c(5,5,5,32,62,49)
#longueur d'un vecteur 
length(v)
#Dimension d'une matrices
m = matrix(1,3,6);m
dim(m)

#somme
sum(v)
#moyenne
mean(v)
#min
min(v)
#max
max(v)
#min et max du vector dans un vect 2D
range(v)
#√©cart-type
sd(v)
#m√©dianne
median(v)
#Taile du vecteur
length(v)
#affichage simple
str(v)
#affichage des informations sur le vecteur : min - Q1 - mediane - moyenne - Q3 - max
summary(v)
#indique si il y a des valeurs manquantes
is.na(v)

#ajout de NA (Not Available)
vbis<- c(NA,v,NA,NA);v
sum(is.na(vbis))
# na.rm = T -> on ne tient pas compte des NA (T = TRUE, F = FALSE)
range(vbis, na.rm = TRUE)


#statistiques simples sur les vectors
#quartiles de v, 4 paquets d'effectifs √©gaux  
#suivant une certaine loi d√©finissant les fronti√®res 
quantile(v)


#d√©termination de fronti√®re : "loi pareto"
quantile(v, probs = c(0,0.1,0.9,1))


#Resum√© des diff√©rentes donn√©es importantes du vecteur
summary(v)

#correlation linaire entre 2 vecteurs
cor(v,w)
#tri 
sort(w)
sort(w, decreasing = T)#decroissant
#ordre : designe l'ordre des √©l√©ments dans le vecteurs sans les trier
order(w)
#rank : permet de d√©finir le m√™me num√©ro d'ordre pour des valeurs √©gales 
rank(w, ties.method = "min")#ex : places des coureurs dans une course √† pied


#valeurs maximun (minimale) membre √† membre
w;v;u
pmax(w,v,u) 
pmin(w,v,u)



#sommes cummul√©es du vecteur : u[n]<-u[n]+u[n-1]
cumsum(v)

#produits cummul√©es du vecteur : u[n]<-u[n]*u[n-1]
cumprod(v)


#max (min) succ√©sifs u[n]<-max(v[n],v[n-1])
cummax(w) 
cummin(w)

##### OPERATIONS SUR BOOLEENS
#types de donn√©es simples :
#bool√©ens


#d√©finition de vecteurs de bool√©ens
A <- c(F,T,F,T)
B<- c(F,F,T,T)

#Table de v√©rit√©s : 
#ET
A & B
#OU
A | B
#non-A
!A
#OU-exclusif
xor(A,B)
#=> (non A ou B)
!A|B
#<=>
(!A|B) & (!B|A)


#on peut effectuer un "filtre bool√©en" sur les membres d'un vecteur 
#t contient tout les membres de v > 30
t <- (v>30) ;v;t
#on ne garde que les membres o√π true a √©t√© obtenu
v <- v[(v>30)] 

#which : retourne les indices du vecteurs satifaissant la condition
v
which(v == 40) #trouve les indices pour lesquels le membre est √©gal √† 30
which(v == 30)
which.max(v) #indice du max
which.min(v) #indice du min

#transformation vect bool -> vect int
as.integer(A)
#all : toutes les valeurs satifont la condition
all(v > 3)
#any : au moins une satisfait la condition
any(v < 3)


##### OPERATIONS SUR LES ENSEMBLES

#unique : supprime la redondance dans le vecteur
H<-unique(c("e","f","g","h","h","h"))

P<-c("e","f","g","h")
Q<-c("g","h","i","j")
#union
union(P,Q)

#intersection
intersect(P,Q)
#diff√©rence (non sym√©trique)

setdiff(P,Q)
setdiff(Q,P)

#diff√©rence sym√©trique
union(setdiff(P,Q),setdiff(Q,P))


#appartenance membre √† membre d'un premier ensemble √† un autre ensemble
#retourne un vecteur de bool√©en r√©pr√©sentant si le i-√®me membre de l'ensemble A appartient √† l'ensemble B

H %in% P
P %in% H
#Les listes
#r√©alit√© algorithmique : dictionaire "cl√©-valeur" (hashmap ?)

#liste cl√©-valeur
l <- list (nom = "Dupond", age = 25, vec = v)


#valeurs
l&nom
l&age
l&vec





#acc√©s par indice dans une liste
l[[1]]
l[[2]]
l[[3]]
#les facteurs 
#classes non ordonn√©es
coul <- factor(c("bleu","vert","rouge","bleu","vert"))# facteur = pas d'ordre
coul


z
c(z)
c(z,z)
w <- c(x,y)
(w <- c(x,y))
x+z
x+y
b
!b
y>7
y[y>7]
y[b]
x[b]
sum(x>5)
sum(x[x>5])
sum( x>5 | x<3)
x > 5 & x < 3
sum(x > 5 & x < 3)
y[3]
y[-3]
y[x]
class(x)
class(b)
as.integer(b)


savehistory("Sauvegarde_historique_TP1.R")
remove()




###https://openclassrooms.com/courses/effectuez-vos-etudes-statistiques-avec-r/introduction-a-r
#######https://fr.wikibooks.org/wiki/Programmer_en_R/Manipuler_les_matrices



savehistory("Sauvegarde_historique_TP1.R")






%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 00000000001000011111000010000000000000000000000
% 00000000001000010000000010000000000000000000000
% 00000000001000010000000010000000000000000000000
% 00000000001000011111000010000000000000000000000
% 00000000000000000000000000000000000000000000000
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 00000000001000011111000010000000000000000000000
% 00000000001000010000000010000000000000000000000
% 00000000001000010000000010000000000000000000000
% 00000000001000011111000010000000000000000000000
% 00000000000000000000000000000000000000000000000
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%












ar exemple, du risque instantant√© de d√©c√®s).
\begin{lstlisting}[language=html]
> library(Epi)
> twoby2(1-smp$suicide.hr,1-smp$abus)
2 by 2 table analysis: 
------------------------------------------------------ 
Outcome   : 0 
Comparing : 0 vs. 1 

    0   1    P(0) 95% conf. interval
0  63  90  0.4118    0.3366   0.4913
1 147 453  0.2450    0.2122   0.2810

                                   95% conf. interval
             Relative Risk: 1.6807    1.3276   2.1276
         Sample Odds Ratio: 2.1571    1.4873   3.1287
Conditional MLE Odds Ratio: 2.1547    1.4577   3.1764
    Probability difference: 0.1668    0.0837   0.2525

             Exact P-value: 1e-04 
        Asymptotic P-value: 1e-04 
------------------------------------------------------
\end{lstlisting}








%%%%%%%%%%%%TU TRAVAILLES SUR LA BRANCH PRIME NOW %%%%%%%%%%%%%%%%%

%%%%%%%%%%%%TU TRAVAILLES SUR LA BRANCH PRIME NOW %%%%%%%%%%%%%%%%%

%%%%%%%%%%%%TU TRAVAILLES SUR LA BRANCH PRIME NOW %%%%%%%%%%%%%%%%%

%%%%%%%%%%%%TU TRAVAILLES SUR LA BRANCH PRIME NOW %%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{lstlisting}[language=html]

\end{lstlisting}

\begin{figure}[H]\begin{center}\includegraphics[scale=1]{ilu/g1.png}\caption{Probabilit√© d'obtention de face entre 0 et 6}\end{center}\end{figure}


%%%%%%%%%%%%TU TRAVAILLES SUR LA BRANCH PRIME NOW %%%%%%%%%%%%%%%%%
%%%%%%%%%%%%TU TRAVAILLES SUR LA BRANCH PRIME NOW %%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%TU TRAVAILLES SUR LA BRANCH PRIME NOW %%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%







%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{lstlisting}[language=html]

\end{lstlisting}

\begin{figure}[H]\begin{center}\includegraphics[scale=1]{ilu/g1.png}\caption{Probabilit√© d'obtention de face entre 0 et 6}\end{center}\end{figure}



 
 






